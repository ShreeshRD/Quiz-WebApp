{"version":3,"sources":["stores/UserStores.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","reportWebVitals.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","userame","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","src","alt","setInputValue","required","doLogin","App","doLogout","observer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.997221d2.chunk.js","sourcesContent":["import {extendObservable} from 'mobx';\r\n// UserStore\r\n\r\nclass UserStore{\r\n    constructor(){\r\n        extendObservable(this,{\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username:''\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","// import logo from './logo.svg';\r\nimport React from 'react';\r\nimport UserStore from './stores/UserStores';\r\nimport './App.css';\r\n\r\nclass InputField extends React.Component \r\n{\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"inputField\">\r\n          <input \r\n            className = 'input'\r\n            type = {this.props.type}\r\n            placeholder = {this.props.placeholder}\r\n            value = {this.props.value}\r\n            onChange = { (e) => this.props.onChange(e.target.value) }\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","// import logo from './logo.svg';\r\nimport React from 'react';\r\nimport UserStore from './stores/UserStores';\r\nimport './App.css';\r\n\r\nclass SubmitButton extends React.Component \r\n{\r\n  render()\r\n  {\r\n    return (\r\n      <div className=\"submitButton\">\r\n        <button\r\n            className = 'btn'\r\n            disabled = {this.props.disabled}\r\n            onClick = { () => this.props.onClick() }\r\n        >\r\n            {this.props.text}\r\n        </button>\r\n      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmitButton;\r\n","\r\nimport InputField   from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport React        from 'react';\r\nimport UserStore    from './stores/UserStores';\r\nimport './App.css';\r\n\r\nclass LoginForm extends React.Component \r\n{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            userame: '',\r\n            password:'',\r\n            buttonDisabled: false\r\n\r\n        }\r\n    }\r\n    \r\n    setInputValue(property, val){\r\n        val = val.trim();                     // removes spaces\r\n        if ( val.length > 12 ){\r\n            return;\r\n        }\r\n        this.setState({\r\n            [property]:val\r\n\r\n        })\r\n\r\n    }\r\n\r\n    resetForm(){\r\n        this.setState({\r\n          username:'',\r\n          password:'',\r\n          buttonDisabled: false  \r\n        })\r\n    }\r\n\r\n    async doLogin(){\r\n        if(!this.state.username){\r\n         return;\r\n        }\r\n        if(!this.state.password){\r\n            return;\r\n        }\r\n        this.setState({\r\n            buttonDisabled: true\r\n        })\r\n\r\n        try{\r\n           \r\n            let res = await fetch('/login',{\r\n                method: 'post',\r\n                headers:{\r\n                    'Accept':'applications/json',\r\n                    'Content-Type': 'applications/json'\r\n\r\n                },\r\n                body: JSON.stringify({\r\n                    username : this.state.username,\r\n                    password: this.state.password\r\n                })\r\n\r\n            });\r\n\r\n            let result = await res.json();\r\n            if(result && result.success){\r\n                UserStore.isLoggedIn = true;\r\n                UserStore.username = result.username;\r\n            }\r\n\r\n            else if( result && result.success === false){\r\n                this.resetForm();\r\n                alert(result.msg);\r\n            }\r\n\r\n        }\r\n\r\n        catch(e){\r\n            console.log(e);\r\n            this.resetForm();\r\n        }\r\n\r\n\r\n    }\r\n\r\n  render()\r\n  {\r\n    return (\r\n        <div>\r\n        <div>\r\n            <img src ='src/images/Quizlogo2.png'  alt=\"Quiz Logo\"/>\r\n        </div>\r\n        <br></br>\r\n        <div className=\"loginForm\">\r\n          Log In\r\n            <InputField \r\n                type = \"text\" \r\n                placeholder = 'Username'  \r\n                value = {this.state.username ? this.state.username : '' }\r\n                onChange =  {(val) => this.setInputValue('username',val) }\r\n                required\r\n            />\r\n\r\n            <InputField \r\n                type = \"password\" \r\n                placeholder = \"Password\"  \r\n                value = {this.state.password ? this.state.password : '' }\r\n                onChange =  {(val) => this.setInputValue('password',val) }\r\n                required\r\n            />    \r\n\r\n            <SubmitButton\r\n                text = \"Login\"\r\n                disabled = {this.state.buttonDisabled}\r\n                onClick = {() => this.doLogin()} \r\n            />\r\n        \r\n        </div>\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport UserStore    from './stores/UserStores';\nimport LoginForm    from './LoginForm';\nimport SubmitButton from './SubmitButton';\nimport './App.css';\n\nclass App extends React.Component{\n  async componentDidMount(){\n    try{\n\n      let res = await fetch('/isLoggedIn',{\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      let result = await res.json(); \n\n      if(result && result.success){\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      }\n\n      else{\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n\n    }\n    catch(e){\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n  }\n\n  async doLogout(){\n    try{\n\n      let res = await fetch('/logout',{\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      let result = await res.json(); \n\n      if(result && result.success){\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n\n    }\n    catch(e){\n      console.log(e);\n    }\n  }\n  \n  render()\n  {\n    if(UserStore.loading){\n      return(\n        <div className = \"app\">\n          <div className = 'container'>\n            Loading,please wait..\n          </div>\n        </div>\n      );\n    }\n\n    else{\n      \n      if(UserStore.isLoggedIn){\n        return(\n          <div className = \"app\">\n            <div className = 'container'>\n              Welcome {UserStore.username}\n\n              <SubmitButton \n                text = {'Log out'}\n                disabled = {false}\n                onClick = { () => this.doLogout() }\n              />\n\n\n            </div>\n          </div>\n        );\n      }\n      return (\n        <div className=\"app\">\n          <div className = 'container'>\n            <LoginForm/>\n          </div>\n        </div>\n      );\n    }\n\n    \n  }\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}